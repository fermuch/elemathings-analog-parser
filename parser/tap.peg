{
// Package TAP parses TAP.
package parser

type Group struct {
    Name string
    Left float64
    Divider string
    Right float64
}
}

TAP ← val:Value+ EOF {
    return val, nil
}

Value ← name:GroupName? start:Number divider:Divider end:Number Separator? {
    n := ""
    if nameStr, ok := name.(string); ok {
        n = nameStr
    }
    return Group{
        Name: n,
        Left: start.(float64),
        Divider: divider.(string),
        Right: end.(float64),
    }, nil
}

GroupName ← name:Identifier Setter {
    nameStr, ok := name.(string)
    if !ok {
        return nil, errors.New("invalid identifier")
    }
    return nameStr, nil
}

Identifier  ← [a-z|A-Z|0-9|_|-]* {
    return string(c.text), nil
}

Number ← '-'? Integer ( '.' DecimalDigit+ )? Exponent? {
    return strconv.ParseFloat(string(c.text), 64)
}

Integer ← '0' / NonZeroDecimalDigit DecimalDigit*

Exponent ← 'e'i [+-]? DecimalDigit+

EscapedChar ← [\x00-\x1f"\\]

EscapeSequence ← SingleCharEscape / UnicodeEscape

SingleCharEscape ← ["\\/bfnrt]

UnicodeEscape ← 'u' HexDigit HexDigit HexDigit HexDigit

DecimalDigit ← [0-9]

NonZeroDecimalDigit ← [1-9]

HexDigit ← [0-9a-f]i

Bool ← "true" { return true, nil } / "false" { return false, nil }

Null ← "null" { return nil, nil }

_ "whitespace" ← [ \t\r\n]*

Separator ← ';' {
    return string(c.text), nil
}

Divider ← '-' {
    return string(c.text), nil
}

Setter ← '=' {
    return string(c.text), nil
}

EOF ← !.